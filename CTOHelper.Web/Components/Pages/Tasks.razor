@page "/tasks"
@inject ITaskService TaskService
@using CTOHelper.Application.Interfaces
@using CTOHelper.Domain.Entities
@using Microsoft.AspNetCore.Components.Forms

<h3>Your tasks</h3>

@if (tasks == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ul>
        @foreach (var task in tasks)
        {
            <li><strong>@task.Title</strong> - Due: @task.DueDate.ToShortDateString()</li>
        }
    </ul>
}

<div>
    <h3>Create New Task</h3>
    <EditForm Model="@newTask" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="title">Title:</label>
            <InputText id="title" @bind-Value="newTask.Title" class="form-control" />
        </div>

        <div class="form-group">
            <label for="description">Description:</label>
            <InputTextArea id="description" @bind-Value="newTask.Description" class="form-control" />
        </div>

        <div class="form-group">
            <label for="dueDate">Due Date:</label>
            <InputDate id="dueDate" @bind-Value="newTask.DueDate" class="form-control" />
        </div>

        <button type="submit" class="btn btn-primary">Create Task</button>
    </EditForm>
</div>

<style>
.form-group {
    margin-bottom: 1rem;
}

.form-control {
    display: block;
    width: 100%;
    padding: 0.375rem 0.75rem;
    margin-bottom: 0.5rem;
}

.btn-primary {
    color: #fff;
    background-color: #007bff;
    border-color: #007bff;
    padding: 0.375rem 0.75rem;
    border-radius: 0.25rem;
}

.validation-message {
    color: red;
    font-size: 0.875rem;
}
</style>

@code {
    private List<DevTask>? tasks;
    private DevTask newTask = new() { DueDate = DateTime.Now.AddDays(1) };

    protected override async Task OnInitializedAsync()
    {
        tasks = (await TaskService.GetTasksAsync()).ToList();
    }

    private async Task HandleValidSubmit()
    {
        await TaskService.CreateTaskAsync(newTask);
        tasks = (await TaskService.GetTasksAsync()).ToList();
        newTask = new DevTask { DueDate = DateTime.Now.AddDays(1) };
    }
}