@page "/login"
@using CTOHelper.Web.Models
@using CTOHelper.Application.Interfaces
@inject IUserService UserService
@inject NavigationManager NavigationManager

<PageTitle>Log In</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <h2 class="text-center mb-4">Login</h2>

            <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group mb-3">
                    <label for="email">Email</label>
                    <InputText id="email" @bind-Value="loginModel.Email" class="form-control" />
                    <ValidationMessage For="@(() => loginModel.Email)" />
                </div>

                <div class="form-group mb-3">
                    <label for="password">Password</label>
                    <InputText type="password" id="password" @bind-Value="loginModel.Password" class="form-control" />
                    <ValidationMessage For="@(() => loginModel.Password)" />
                </div>

                <div class="form-check mb-3">
                    <InputCheckbox id="rememberMe" @bind-Value="loginModel.RememberMe" class="form-check-input" />
                    <label class="form-check-label" for="rememberMe">Remember me</label>
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">@errorMessage</div>
                }

                <button type="submit" class="btn btn-primary w-100">Login</button>
            </EditForm>

            <div class="text-center mt-3">
                <a href="/signup">Don't have an account? Sign up here</a>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string? errorMessage;

    private async Task HandleLogin()
    {
        try
        {
            var user = await UserService.GetUserByEmailAsync(loginModel.Email);
            if (user != null)
            {
                // TODO: Add proper password verification
                // TODO: Add authentication state
                NavigationManager.NavigateTo("/");
            }
            else
            {
                errorMessage = "Invalid email or password";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Login failed. Please try again.";
        }
    }
}